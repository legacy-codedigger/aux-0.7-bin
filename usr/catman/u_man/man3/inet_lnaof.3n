


     iiiinnnneeeetttt((((3333NNNN))))						      iiiinnnneeeetttt((((3333NNNN))))



     NNNNAAAAMMMMEEEE
	  inet_addr, inet_network, inet_ntoa, inet_makeaddr,
	  inet_lnaof, inet_netof - Internet address manipulation
	  routines

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
	  ####iiiinnnncccclllluuuuddddeeee <<<<ssssyyyyssss////ssssoooocccckkkkeeeetttt....hhhh>>>>
	  ####iiiinnnncccclllluuuuddddeeee <<<<nnnneeeettttiiiinnnneeeetttt////iiiinnnn....hhhh>>>>
	  ####iiiinnnncccclllluuuuddddeeee <<<<aaaarrrrppppaaaa////iiiinnnneeeetttt....hhhh>>>>

	  ssssttttrrrruuuucccctttt iiiinnnn____aaaaddddddddrrrr iiiinnnneeeetttt____aaaaddddddddrrrr((((_c_p))))
	  cccchhhhaaaarrrr ****_c_p;;;;

	  iiiinnnntttt iiiinnnneeeetttt____nnnneeeettttwwwwoooorrrrkkkk((((_c_p))))
	  cccchhhhaaaarrrr ****_c_p;;;;

	  cccchhhhaaaarrrr ****iiiinnnneeeetttt____nnnnttttooooaaaa((((_i_n))))
	  ssssttttrrrruuuucccctttt iiiinnnneeeetttt____aaaaddddddddrrrr _i_n;;;;

	  ssssttttrrrruuuucccctttt iiiinnnn____aaaaddddddddrrrr iiiinnnneeeetttt____mmmmaaaakkkkeeeeaaaaddddddddrrrr((((_n_e_t,,,, _l_n_a))))
	  iiiinnnntttt _n_e_t,,,, _l_n_a;;;;

	  iiiinnnntttt iiiinnnneeeetttt____llllnnnnaaaaooooffff((((_i_n))))
	  ssssttttrrrruuuucccctttt iiiinnnn____aaaaddddddddrrrr _i_n;;;;

	  iiiinnnntttt iiiinnnneeeetttt____nnnneeeettttooooffff((((_i_n))))
	  ssssttttrrrruuuucccctttt iiiinnnn____aaaaddddddddrrrr _i_n;;;;

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
	  The routines iiiinnnneeeetttt____aaaaddddddddrrrr and iiiinnnneeeetttt____nnnneeeettttwwwwoooorrrrkkkk each interpret
	  character strings representing numbers expressed in the
	  Internet standard ``.'' notation, returning numbers suitable
	  for use as Internet addresses	and Internet network numbers,
	  respectively.	 The routine iiiinnnneeeetttt____nnnnttttooooaaaa takes an	Internet
	  address and returns an ASCII string representing the address
	  in ``.'' notation.  The routine iiiinnnneeeetttt____mmmmaaaakkkkeeeeaaaaddddddddrrrr	takes an
	  Internet network number and a	local network address and
	  constructs an	Internet address from it.  The routines
	  iiiinnnneeeetttt____nnnneeeettttooooffff and iiiinnnneeeetttt____llllnnnnaaaaooooffff break apart	Internet host
	  addresses, returning the network number and local network
	  address part,	respectively.

	  All Internet address are returned in network order (bytes
	  ordered from left to right).	All network numbers and	local
	  address parts	are returned as	machine	format integer values.

     IIIINNNNTTTTEEEERRRRNNNNEEEETTTT AAAADDDDDDDDRRRREEEESSSSSSSSEEEESSSS
	  Values specified using the ``.'' notation take one of	the
	  following forms:
	       a.b.c.d
	       a.b.c
	       a.b



     Page 1					   (last mod. 1/14/87)






     iiiinnnneeeetttt((((3333NNNN))))						      iiiinnnneeeetttt((((3333NNNN))))



	       a
	  When four parts are specified, each is interpreted as	a byte
	  of data and assigned,	from left to right, to the four	bytes
	  of an	Internet address.

	  When a three part address is specified, the last part	is
	  interpreted as a 16-bit quantity and placed in the right
	  most two bytes of the	network	address.  This makes the three
	  part address format convenient for specifying	Class B
	  network addresses as ``128.net.host''.

	  When a two part address is supplied, the last	part is
	  interpreted as a 24-bit quantity and placed in the right
	  most three bytes of the network address.  This makes the two
	  part address format convenient for specifying	Class A
	  network addresses as ``net.host''.

	  When only one	part is	given, the value is stored directly in
	  the network address without any byte rearrangement.

	  All numbers supplied as ``parts'' in a ``.'' notation	may be
	  decimal, octal, or hexadecimal, as specified in the C
	  language (i.e. a leading 0x or 0X implies hexadecimal;
	  otherwise, a leading 0 implies octal;	otherwise, the number
	  is interpreted as decimal).

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
	  gethostent(3N), getnetent(3N), hosts(4N), networks(4N),.

     DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
	  The value -1 is returned by iiiinnnneeeetttt____aaaaddddddddrrrr	and iiiinnnneeeetttt____nnnneeeettttwwwwoooorrrrkkkk for
	  malformed requests.

     BBBBUUUUGGGGSSSS
	  The problem of host byte ordering versus network byte
	  ordering is confusing.  A simple way to specify Class	C
	  network addresses in a manner	similar	to that	for Class B
	  and Class A is needed.  The string returned by iiiinnnneeeetttt____nnnnttttooooaaaa
	  resides in a static memory area.
















     Page 2					   (last mod. 1/14/87)



